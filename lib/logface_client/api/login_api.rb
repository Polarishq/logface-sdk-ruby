=begin
#FireFawkes Developer API

#External Facing Developer API 

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module LogfaceClient
  class LoginApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Endpoint call via a social login oauth2 callback
    # Callback for OAuth2 Social logins
    # @param state 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code 
    # @option opts [String] :token 
    # @return [Error]
    def login_authorize_callback_get(state, opts = {})
      data, _status_code, _headers = login_authorize_callback_get_with_http_info(state, opts)
      return data
    end

    # Endpoint call via a social login oauth2 callback
    # Callback for OAuth2 Social logins
    # @param state 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code 
    # @option opts [String] :token 
    # @return [Array<(Error, Fixnum, Hash)>] Error data, response status code and response headers
    def login_authorize_callback_get_with_http_info(state, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LoginApi.login_authorize_callback_get ..."
      end
      # verify the required parameter 'state' is set
      if @api_client.config.client_side_validation && state.nil?
        fail ArgumentError, "Missing the required parameter 'state' when calling LoginApi.login_authorize_callback_get"
      end
      # resource path
      local_var_path = "/login/authorize/callback"

      # query parameters
      query_params = {}
      query_params[:'state'] = state
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Error')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoginApi#login_authorize_callback_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Endpoint to begin the oauth2 authorization flow
    # Does the initial social auth redirect
    # @param provider 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :redirect_url 
    # @return [Error]
    def login_authorize_get(provider, opts = {})
      data, _status_code, _headers = login_authorize_get_with_http_info(provider, opts)
      return data
    end

    # Endpoint to begin the oauth2 authorization flow
    # Does the initial social auth redirect
    # @param provider 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :redirect_url 
    # @return [Array<(Error, Fixnum, Hash)>] Error data, response status code and response headers
    def login_authorize_get_with_http_info(provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LoginApi.login_authorize_get ..."
      end
      # verify the required parameter 'provider' is set
      if @api_client.config.client_side_validation && provider.nil?
        fail ArgumentError, "Missing the required parameter 'provider' when calling LoginApi.login_authorize_get"
      end
      # resource path
      local_var_path = "/login/authorize"

      # query parameters
      query_params = {}
      query_params[:'provider'] = provider
      query_params[:'redirect_url'] = opts[:'redirect_url'] if !opts[:'redirect_url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Error')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoginApi#login_authorize_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke a refresh token
    # Revoke a refresh token
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def login_oauth_revoke_post(body, opts = {})
      login_oauth_revoke_post_with_http_info(body, opts)
      return nil
    end

    # Revoke a refresh token
    # Revoke a refresh token
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def login_oauth_revoke_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LoginApi.login_oauth_revoke_post ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LoginApi.login_oauth_revoke_post"
      end
      # resource path
      local_var_path = "/login/oauth/revoke"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoginApi#login_oauth_revoke_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get JWT for API Keys
    # Issue a token for an api key
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Token]
    def login_oauth_token_post(body, opts = {})
      data, _status_code, _headers = login_oauth_token_post_with_http_info(body, opts)
      return data
    end

    # Get JWT for API Keys
    # Issue a token for an api key
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Token, Fixnum, Hash)>] Token data, response status code and response headers
    def login_oauth_token_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LoginApi.login_oauth_token_post ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LoginApi.login_oauth_token_post"
      end
      # resource path
      local_var_path = "/login/oauth/token"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoginApi#login_oauth_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of social providers
    # Retrieve social providers
    # @param [Hash] opts the optional parameters
    # @return [Array<SocialProvider>]
    def login_providers_get(opts = {})
      data, _status_code, _headers = login_providers_get_with_http_info(opts)
      return data
    end

    # Returns a list of social providers
    # Retrieve social providers
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SocialProvider>, Fixnum, Hash)>] Array<SocialProvider> data, response status code and response headers
    def login_providers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LoginApi.login_providers_get ..."
      end
      # resource path
      local_var_path = "/login/providers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SocialProvider>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoginApi#login_providers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Endpoint to get a new refresh token
    # Gets the token for a given refresh token
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Token]
    def login_token_post(body, opts = {})
      data, _status_code, _headers = login_token_post_with_http_info(body, opts)
      return data
    end

    # Endpoint to get a new refresh token
    # Gets the token for a given refresh token
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Token, Fixnum, Hash)>] Token data, response status code and response headers
    def login_token_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LoginApi.login_token_post ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LoginApi.login_token_post"
      end
      # resource path
      local_var_path = "/login/token"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoginApi#login_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
